"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const Base_1 = __importDefault(require("./Base"));
const UrlBuilder_1 = __importDefault(require("./UrlBuilder"));
class Plural extends Base_1.default {
    count(opts) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrl(opts)
                .limit((_a = opts === null || opts === void 0 ? void 0 : opts.limit) !== null && _a !== void 0 ? _a : 1);
            const res = (yield axios_1.default.head(url.toString()));
            return parseInt((_b = res.headers['x-total-count']) !== null && _b !== void 0 ? _b : '0', 10);
        });
    }
    all(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrl(opts);
            const res = (yield axios_1.default.get(url.toString()));
            return res.data;
        });
    }
    one(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const items = yield this.all({ ids: [id] });
            return items[0];
        });
    }
    add(data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.val(Object.assign(Object.assign({}, data), { id: 0 }));
            const url = new UrlBuilder_1.default(this.server, this.api, this.token).toString();
            const res = (yield axios_1.default.post(url, data));
            return res.data;
        });
    }
    update(data) {
        return __awaiter(this, void 0, void 0, function* () {
            this.val(data);
            const url = new UrlBuilder_1.default(this.server, `${this.api}/${data.id}`, this.token).toString();
            const res = (yield axios_1.default.patch(url, data));
            return res.data;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = new UrlBuilder_1.default(this.server, `${this.api}/${id}`, this.token).toString();
            yield axios_1.default.delete(url);
        });
    }
    getUrl(opts) {
        const url = new UrlBuilder_1.default(this.server, this.api, this.token)
            .limit(opts === null || opts === void 0 ? void 0 : opts.limit)
            .page(opts === null || opts === void 0 ? void 0 : opts.page)
            .sort(opts === null || opts === void 0 ? void 0 : opts.sort)
            .order(opts === null || opts === void 0 ? void 0 : opts.order)
            .start(opts === null || opts === void 0 ? void 0 : opts.start)
            .end(opts === null || opts === void 0 ? void 0 : opts.end)
            .q(opts === null || opts === void 0 ? void 0 : opts.q);
        if (opts === null || opts === void 0 ? void 0 : opts.ids)
            opts.ids.forEach((id) => url.id(id));
        if (opts === null || opts === void 0 ? void 0 : opts.gte)
            opts.gte.forEach((it) => url.gte(it.name, it.value));
        if (opts === null || opts === void 0 ? void 0 : opts.lte)
            opts.lte.forEach((it) => url.lte(it.name, it.value));
        if (opts === null || opts === void 0 ? void 0 : opts.ne)
            opts.ne.forEach((it) => url.ne(it.name, it.value));
        if (opts === null || opts === void 0 ? void 0 : opts.like)
            opts.like.forEach((it) => url.like(it.name, it.value));
        if (opts === null || opts === void 0 ? void 0 : opts.embed)
            opts.embed.forEach((it) => url.embed(it));
        if (opts === null || opts === void 0 ? void 0 : opts.expand)
            opts.expand.forEach((it) => url.expand(it));
        if (opts === null || opts === void 0 ? void 0 : opts.param) {
            const { param } = opts;
            if (Array.isArray(param))
                param.forEach((it) => url.p(it.name, it.value));
            else
                Object.entries(param).forEach(([name, value]) => url.p(name, value));
        }
        return url;
    }
}
exports.default = Plural;

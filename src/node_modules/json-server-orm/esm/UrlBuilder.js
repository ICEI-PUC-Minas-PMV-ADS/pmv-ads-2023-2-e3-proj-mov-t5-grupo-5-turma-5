export default class UrlBuilder {
    constructor(base, apiName, token) {
        this.base = base;
        this.apiName = apiName;
        this.token = token;
        this.params = [];
        if (this.base === undefined)
            throw new Error('url base is empty');
        if (!this.base.endsWith('/'))
            this.base += '/';
        if (this.token)
            this.p('_token', this.token);
    }
    toString() {
        return this.base + this.apiName + (this.params.length ? (`?${this.params.join('&')}`) : '');
    }
    p(name, v) {
        if (name === '')
            throw new Error('name is empty');
        if (v === undefined)
            return this;
        let val;
        if (typeof v === 'object' && v !== null && 'toString' in v)
            val = v.toString();
        else if (typeof v === 'symbol')
            val = v.description;
        else
            val = `${v}`;
        this.params.push(`${encodeURIComponent(name)}=${encodeURIComponent(val !== null && val !== void 0 ? val : '')}`);
        return this;
    }
    id(v) { return this.p('id', v); }
    page(v) { return this.p('_page', v); }
    limit(v) { return this.p('_limit', v); }
    sort(v) { return this.p('_sort', v); }
    order(v) { return this.p('_order', v); }
    start(v) { return this.p('_start', v); }
    end(v) { return this.p('_end', v); }
    gte(name, v) { return this.p(`${name}_gte`, v); }
    lte(name, v) { return this.p(`${name}_lte`, v); }
    ne(name, v) { return this.p(`${name}_ne`, v); }
    like(name, v) { return this.p(`${name}_like`, v); }
    q(v) { return this.p('q', v); }
    expand(v) { return this.p('_expand', v); }
    embed(v) { return this.p('_embed', v); }
}
// export const isUrlBuilder = (arg?: any): arg is UrlBuilder => !!arg;
// Examples
// const url = 'http://localhost:3000/api/posts?_token=1989&_embed=comments&_embed=tags&_expand=user&userId=2';

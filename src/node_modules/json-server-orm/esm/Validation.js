import Ajv from 'ajv';
export default class Validation {
    constructor(schema) {
        this.schema = schema;
        this.validation = {};
        const ajv = new Ajv();
        ajv.addKeyword('propertyOrder'); // from TJS
        ajv.addSchema(schema);
        const keys = Object.keys(schema.definitions).map((k) => k.toLowerCase()); // [post, ]
        keys.forEach((k) => {
            const v = ajv.getSchema(`#/definitions/${Validation.key2DefinitionName(k)}`);
            if (v)
                this.validation[k] = v;
        });
    }
    static key2DefinitionName(k) {
        return (k[0].toUpperCase() + k.substr(1)); // post -> Post
    }
    static table2DefinitionName(t) {
        return (t[0].toUpperCase() + t.substr(1, t.length - 2)); // posts -> Post
    }
    getOwnProperties(name) {
        const fields = this.getOwnFields(name);
        const allProps = this.getProperties(name);
        const props = {};
        if (allProps) {
            fields === null || fields === void 0 ? void 0 : fields.forEach((f) => {
                props[f] = allProps[f];
            });
        }
        return props;
    }
    getOwnFields(name) {
        var _a, _b;
        const ps = this.getProperties(name);
        const fields = [];
        if (!ps)
            return fields;
        Object.entries(ps).forEach(([k, v]) => {
            var _a;
            const type = v.type;
            if (!v.$ref //
                && !(type === 'array' && ((_a = v.items) === null || _a === void 0 ? void 0 : _a.$ref)) // array items
            ) {
                fields.push(k);
            }
        });
        // keep definition order
        const order = (_b = (_a = (this.schema.definitions)[Validation.table2DefinitionName(name)]) === null || _a === void 0 ? void 0 : _a.propertyOrder) !== null && _b !== void 0 ? _b : [];
        const retFields = [];
        order.forEach((f) => fields.includes(f) && retFields.push(f));
        return retFields;
    }
    getProperties(name) {
        var _a, _b;
        return (_b = (_a = (this.schema.definitions)[Validation.table2DefinitionName(name)]) === null || _a === void 0 ? void 0 : _a.properties) !== null && _b !== void 0 ? _b : {};
    }
    // @see https://ajv.js.org/guide/modifying-data.html#assigning-defaults
    getDefaultItem(name) {
        const ps = this.getOwnProperties(name);
        const props = {};
        if (ps) {
            Object.entries(ps).forEach(([k, v]) => {
                const type = v.type;
                switch (type) {
                    case 'number':
                    case 'integer':
                        props[k] = 0;
                        break;
                    case 'string':
                        props[k] = '';
                        break;
                    case 'boolean':
                        props[k] = false;
                        break;
                    case 'object':
                        props[k] = {};
                        break;
                    case 'array':
                        props[k] = [];
                        break;
                    case 'null':
                        props[k] = null;
                        break;
                    default: break;
                }
            });
        }
        return props;
    }
}
